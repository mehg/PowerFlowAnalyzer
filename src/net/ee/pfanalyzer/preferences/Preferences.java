/*******************************************************************************
 * Copyright 2019 Markus Gronau
 * 
 * This file is part of PowerFlowAnalyzer.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.ee.pfanalyzer.preferences;

import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import javax.swing.JOptionPane;

public class Preferences {
	private final static String PREFERENCES_FILE = ".power-flow-analyzer.ini";
	private final static String DEFAULT_PREFERENCES_FILE = "/properties.ini";
	private final static String FILE_COMMENTS = "This file was automatically generated by PowerFlowAnalyzer";
	
	private static Properties properties = new Properties();
	private static Properties defaultProperties = new Properties();
	
	private final static Color COLOR_HYPERLINK_FOREGROUND = Color.BLUE;
	private final static Color COLOR_DISABLED_FOREGROUND = Color.DARK_GRAY;
	private final static Color COLOR_FLAG_ERROR = Color.RED;
	private final static Color COLOR_FLAG_ERROR_BRIGHT = new Color(255, 170, 170);
	private final static Color COLOR_FLAG_WARNING = new Color(255, 150, 0);
	private final static Color COLOR_FLAG_CORRECT = Color.GREEN.darker();
	
	static {
		InputStream defaultIn = null;
		FileReader reader = null;
		try {
			// load default preferences
			defaultIn = Preferences.class.getResourceAsStream(DEFAULT_PREFERENCES_FILE);
			defaultProperties.load(defaultIn);
			// load user preferences
			File prefFile = getPreferencesFile();
			if(prefFile.exists() && prefFile.canRead()) {
				reader = new FileReader(prefFile);
				properties.load(reader);
				reader.close();
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Could not load preferences: " + e, 
					"Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		} finally {
			try {
				if(defaultIn != null)
					defaultIn.close();
				if(reader != null)
					reader.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private static File getPreferencesFile() {
		return new File(System.getProperty("user.home"), PREFERENCES_FILE);
	}
	
	public static void saveProperties() {
		try {
			FileWriter writer = new FileWriter(getPreferencesFile());
			properties.store(writer, FILE_COMMENTS);
			writer.close();
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "Could not save user preferences: " + e, 
					"Error", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		}
	}
	
	public static String getProperty(String name) {
		return getProperty(name, false);
	}
	
	public static String getProperty(String name, boolean isUserPreference) {
		String property = properties.getProperty(name);
		if(isUserPreference == false && property == null)
			return getDefaultProperty(name);
		return property;
	}
	
	public static String getFirstProperty(String name) {
		return getFirstProperty(name, false);
	}
	
	public static String getFirstProperty(String name, boolean isUserPreference) {
		String property = getProperty(name, isUserPreference);
		if(property == null)
			return null;
		String[] items = property.split(",");
		if(items == null || items.length == 0)
			return property;
		return items[0].trim();
	}
	
	public static String getDefaultProperty(String name) {
		return getDefaultProperty(name, true);
	}
	
	public static String getDefaultProperty(String name, boolean mustExist) {
		String property = defaultProperties.getProperty(name);
		if(mustExist && property == null) {
			System.err.println("Property has no default value: " + name);
			throw new IllegalArgumentException("Property has no default value: " + name);
		}
		return property;
	}
	
	public static boolean getBooleanProperty(String name) {
		return Boolean.parseBoolean(getProperty(name).trim());
	}
	
	public static int getIntProperty(String name) {
		return Integer.parseInt(getProperty(name).trim());
	}
	
	public static void setProperty(String name, String value) {
		// only write preferences differing from default preferences
		if(value == null || value.equals(getDefaultProperty(name, false)))
			properties.remove(name);
		else
			properties.setProperty(name, value);
	}
	
	public static void setProperty(String name, boolean value) {
		setProperty(name, Boolean.toString(value));
	}
	
	public static void setProperty(String name, int value) {
		setProperty(name, Integer.toString(value));
	}
	
	public static Color getHyperlinkForeground() {
		return COLOR_HYPERLINK_FOREGROUND;
	}
	
	public static Color getDisabledForeground() {
		return COLOR_DISABLED_FOREGROUND;
	}
	
	public static Color getFlagCorrectColor() {
		return COLOR_FLAG_CORRECT;
	}
	
	public static Color getFlagFailureColor() {
		return COLOR_FLAG_ERROR;
	}
	
	public static Color getFlagWarningColor() {
		return COLOR_FLAG_WARNING;
	}
	
	public static Color getFlagFailureColorBright() {
		return COLOR_FLAG_ERROR_BRIGHT;
	}
}
